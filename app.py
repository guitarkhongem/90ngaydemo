import streamlit as st
import pandas as pd
import numpy as np
from openpyxl import load_workbook, Workbook
from openpyxl.styles import PatternFill, Border, Side
from openpyxl.utils import get_column_letter, column_index_from_string
from openpyxl.utils.dataframe import dataframe_to_rows
import os
import re
from copy import copy
import logging
import io
import zipfile
import tempfile
from typing import List, Dict, Set, Optional, Any

# --- C·∫§U H√åNH LOGGING ---
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# --- C·∫§U H√åNH C√îNG C·ª§ 1: SAO CH√âP & √ÅNH X·∫† ---
TOOL1_COLUMN_MAPPING: Dict[str, str] = {
    'A': 'T', 'B': 'U', 'C': 'Y', 'D': 'C', 'E': 'H',
    'F': 'I', 'G': 'X', 'I': 'K', 'N': 'AY'
}
TOOL1_START_ROW_DESTINATION: int = 7
TOOL1_TEMPLATE_FILE_PATH: str = "templates/PL3-01-CV2071-QLƒêƒê (Cap nhat).xlsx"
TOOL1_DESTINATION_FILE_NAME: str = "PL3-01-CV2071-QLƒêƒê (Cap nhat).xlsx"

# --- C·∫§U H√åNH C√îNG C·ª§ 2: L√ÄM S·∫†CH & T√ÅCH FILE ---
# (Gi·ªØ nguy√™n nh∆∞ code g·ªëc)

# --- C√ÅC H√ÄM HELPER CHUNG ---
# (Gi·ªØ nguy√™n c√°c h√†m helper nh∆∞ code g·ªëc)

def get_sheet_names_from_buffer(file_buffer: io.BytesIO) -> List[str]:
    """ƒê·ªçc t√™n c√°c sheet t·ª´ m·ªôt buffer file Excel m√† kh√¥ng l√†m thay ƒë·ªïi v·ªã tr√≠ con tr·ªè."""
    try:
        original_position = file_buffer.tell()
        file_buffer.seek(0)
        wb = load_workbook(file_buffer, read_only=True)
        sheet_names = wb.sheetnames
        file_buffer.seek(original_position)
        wb.close()
        return sheet_names
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc sheet t·ª´ file: {e}")
        return []

def get_sheet_names_from_path(file_path: str) -> List[str]:
    """ƒê·ªçc t√™n c√°c sheet t·ª´ file Excel theo ƒë∆∞·ªùng d·∫´n."""
    try:
        wb = load_workbook(file_path, read_only=True)
        sheet_names = wb.sheetnames
        wb.close()
        return sheet_names
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc sheet t·ª´ file m·∫´u: {e}")
        return []

def tool1_transform_and_copy(source_buffer, source_sheet, dest_sheet, progress_bar, status_label):
    """
    Sao ch√©p v√† √°nh x·∫° d·ªØ li·ªáu t·ª´ file ngu·ªìn sang file ƒë√≠ch d·ª±a tr√™n file m·∫´u c·ªë ƒë·ªãnh.
    √Åp vi·ªÅn cho to√†n b·ªô v√πng A:AX trong c√°c h√†ng d·ªØ li·ªáu.
    """
    try:
        # 1. ƒê·ªçc d·ªØ li·ªáu ngu·ªìn
        status_label.info("ƒêang ƒë·ªçc d·ªØ li·ªáu t·ª´ file ngu·ªìn...")
        source_cols_letters_list = list(TOOL1_COLUMN_MAPPING.keys())
        source_cols_str = ",".join(source_cols_letters_list)
        
        df_source = pd.read_excel(source_buffer,
                                 sheet_name=source_sheet,
                                 header=None,
                                 skiprows=2,
                                 usecols=source_cols_str,
                                 engine='openpyxl')
        
        sorted_source_cols = sorted(source_cols_letters_list, key=column_index_from_string)
        if len(df_source.columns) != len(sorted_source_cols):
            st.error(f"L·ªói ƒë·ªçc c·ªôt: ƒê·ªçc ƒë∆∞·ª£c {len(df_source.columns)} c·ªôt, nh∆∞ng mong ƒë·ª£i {len(sorted_source_cols)} c·ªôt.")
            logging.error(f"L·ªói mapping c·ªôt: ƒê√£ ƒë·ªçc {df_source.columns} nh∆∞ng key l√† {sorted_source_cols}")
            return None

        df_source.columns = sorted_source_cols 
        df_source_renamed = df_source.rename(columns=TOOL1_COLUMN_MAPPING)
        progress_bar.progress(20)

        # 2. M·ªü file m·∫´u
        status_label.info("ƒêang m·ªü file m·∫´u...")
        if not os.path.exists(TOOL1_TEMPLATE_FILE_PATH):
            st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y file m·∫´u t·∫°i '{TOOL1_TEMPLATE_FILE_PATH}'.")
            logging.error(f"Kh√¥ng t√¨m th·∫•y file m·∫´u t·∫°i {TOOL1_TEMPLATE_FILE_PATH}")
            return None
        wb_dest = load_workbook(TOOL1_TEMPLATE_FILE_PATH)
        if dest_sheet not in wb_dest.sheetnames:
            st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y sheet '{dest_sheet}' trong file m·∫´u.")
            logging.error(f"Sheet '{dest_sheet}' kh√¥ng t·ªìn t·∫°i trong file m·∫´u")
            wb_dest.close()
            return None
        ws_dest = wb_dest[dest_sheet]
        progress_bar.progress(40)

        # 3. Ghi d·ªØ li·ªáu
        status_label.info("ƒêang sao ch√©p d·ªØ li·ªáu...")
        total_rows_to_write = len(df_source)
        
        for i, (source_col_letter_in_map, dest_col_letter) in enumerate(TOOL1_COLUMN_MAPPING.items()):
            col_index_dest = column_index_from_string(dest_col_letter)
            data_series = df_source_renamed[dest_col_letter]
            
            for j, value in enumerate(data_series, start=TOOL1_START_ROW_DESTINATION):
                cell_value = None if pd.isna(value) else value
                ws_dest.cell(row=j, column=col_index_dest, value=cell_value)
            
            progress_bar.progress(40 + int((i + 1) / len(TOOL1_COLUMN_MAPPING) * 40))

        # 4. K·∫ª vi·ªÅn cho v√πng d·ªØ li·ªáu th·ª±c t·∫ø (A ‚Üí AX)
        status_label.info("ƒêang k·∫ª vi·ªÅn cho v√πng d·ªØ li·ªáu m·ªõi...")
        thin_border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        start_row = TOOL1_START_ROW_DESTINATION
        end_row = start_row + total_rows_to_write - 1
        start_col, end_col = 1, 50  # A:AX

        for row in ws_dest.iter_rows(min_row=start_row, max_row=end_row,
                                    min_col=start_col, max_col=end_col):
            for cell in row:
                cell.border = thin_border
        progress_bar.progress(95)

        # 5. L∆∞u k·∫øt qu·∫£ v√†o buffer
        status_label.info("ƒêang l∆∞u k·∫øt qu·∫£...")
        output_buffer = io.BytesIO()
        wb_dest.save(output_buffer)
        output_buffer.seek(0)
        progress_bar.progress(100)
        wb_dest.close()
        return output_buffer

    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω C√¥ng c·ª• 1: {e}")
        logging.error(f"L·ªói C√¥ng c·ª• 1: {e}", exc_info=True)
        return None

# --- GIAO DI·ªÜN STREAMLIT CH√çNH ---
st.set_page_config(page_title="TSCopyRight", layout="wide", page_icon="üöÄ")

# --- SIDEBAR ---
# (Gi·ªØ nguy√™n nh∆∞ code tr∆∞·ªõc)

# --- MAIN PAGE ---
st.title("Chi·∫øn D·ªãch X√¢y D·ª±ng C∆° S·ªü D·ªØ Li·ªáu ƒê·∫•t ƒêai")
st.header("B·ªô C√¥ng c·ª• H·ªó tr·ª£ D·ªØ li·ªáu")
st.markdown("---")

# --- T·∫†O 2 TAB CHO 2 C√îNG C·ª§ ---
tab1, tab2 = st.tabs([
    "C√¥ng c·ª• 1: Sao ch√©p & √Ånh x·∫° D·ªØ li·ªáu",
    "C√¥ng c·ª• 2: L√†m s·∫°ch & T√°ch file (Quy tr√¨nh ch√≠nh)"
])

# --- GIAO DI·ªÜN CHO C√îNG C·ª§ 1 ---
with tab1:
    st.subheader("Sao ch√©p d·ªØ li·ªáu t·ª´ File Ngu·ªìn sang File M·∫´u")
    
    st.markdown("### B∆∞·ªõc 1: T·∫£i l√™n File Ngu·ªìn (File ch·ª©a d·ªØ li·ªáu)")
    source_file = st.file_uploader("Ch·ªçn File Ngu·ªìn (.xlsx, .xlsm)", type=["xlsx", "xlsm"], key="tool1_source")
    
    source_sheet = None
    dest_sheet = None

    col1, col2 = st.columns(2)
    with col1:
        if source_file:
            source_sheets = get_sheet_names_from_buffer(source_file)
            source_sheet = st.selectbox("Ch·ªçn Sheet Ngu·ªìn (ƒë·ªÉ ƒë·ªçc):", source_sheets, key="tool1_source_sheet")
    
    with col2:
        try:
            dest_sheets = get_sheet_names_from_path(TOOL1_TEMPLATE_FILE_PATH)
            dest_sheet = st.selectbox("Ch·ªçn Sheet ƒê√≠ch (ƒë·ªÉ ghi):", dest_sheets, key="tool1_dest_sheet")
        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file m·∫´u t·∫°i '{TOOL1_TEMPLATE_FILE_PATH}'. Vui l√≤ng ki·ªÉm tra!")
            logging.error(f"L·ªói ƒë·ªçc file m·∫´u: {e}")
            dest_sheet = None

    st.markdown("### B∆∞·ªõc 2: X√°c nh·∫≠n")
    start_tool1 = st.button("B·∫Øt ƒë·∫ßu Sao ch√©p & √Ånh x·∫°", key="tool1_start")

    if start_tool1:
        if not source_file or not source_sheet or not dest_sheet:
            st.error("Vui l√≤ng t·∫£i l√™n file ngu·ªìn v√† ch·ªçn c·∫£ hai sheet.")
        else:
            progress_bar_tool1 = st.progress(0)
            status_label_tool1 = st.empty()
            
            try:
                source_file.seek(0)
                result_buffer = tool1_transform_and_copy(
                    source_file, source_sheet, 
                    dest_sheet, 
                    progress_bar_tool1, status_label_tool1
                )
                
                if result_buffer:
                    status_label_tool1.success("‚úÖ HO√ÄN T·∫§T!")
                    st.download_button(
                        label="T·∫£i v·ªÅ File ƒê√≠ch ƒë√£ c·∫≠p nh·∫≠t",
                        data=result_buffer,
                        file_name=TOOL1_DESTINATION_FILE_NAME,
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                else:
                    status_label_tool1.error("X·ª≠ l√Ω th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra log.")
            
            except Exception as e:
                st.error(f"L·ªói nghi√™m tr·ªçng C√¥ng c·ª• 1: {e}")
                logging.error(f"L·ªói Streamlit Tool 1: {e}", exc_info=True)

# --- GIAO DI·ªÜN CHO C√îNG C·ª§ 2 ---
# (Gi·ªØ nguy√™n nh∆∞ code tr∆∞·ªõc)
# (Gi·ªØ nguy√™n to√†n b·ªô giao di·ªán v√† logic c·ªßa C√¥ng c·ª• 2 nh∆∞ code g·ªëc)

with tab2:
    st.subheader("L√†m s·∫°ch, Ph√¢n lo·∫°i v√† T√°ch file t·ª± ƒë·ªông")
    
    st.markdown("### B∆∞·ªõc 1: T·∫£i l√™n File Excel")
    uploaded_file_tool2 = st.file_uploader("Ch·ªçn file Excel c·ªßa b·∫°n (.xlsx, .xlsm)", type=["xlsx", "xlsm"], key="tool2_uploader")

    if uploaded_file_tool2:
        st.markdown("---")
        st.markdown("### B∆∞·ªõc 2: Ch·ªçn Sheet")
        try:
            uploaded_file_tool2.seek(0)
            wb_sheets = load_workbook(uploaded_file_tool2, read_only=True)
            sheet_names = wb_sheets.sheetnames
            wb_sheets.close()
            
            selected_sheet_tool2 = st.selectbox("Ch·ªçn sheet ch√≠nh ƒë·ªÉ x·ª≠ l√Ω:", sheet_names, 
                                               help="ƒê√¢y l√† sheet g·ªëc ch·ª©a d·ªØ li·ªáu b·∫°n mu·ªën l·ªçc.", 
                                               key="tool2_sheet_select")

            st.markdown("### B∆∞·ªõc 3: X√°c nh·∫≠n")
            start_button_tool2 = st.button("B·∫Øt ƒë·∫ßu L√†m s·∫°ch & T√°ch file", key="tool2_start")
            st.markdown("---")

            if start_button_tool2:
                st.markdown("### B∆∞·ªõc 4: Ho√†n th√†nh v√† T·∫£i v·ªÅ")
                progress_bar = st.progress(0)
                status_text_area = st.empty()
                
                try:
                    status_text_area.info("ƒêang t·∫£i file v√†o b·ªô nh·ªõ...")
                    uploaded_file_tool2.seek(0)
                    main_wb = load_workbook(uploaded_file_tool2)
                    
                    main_wb = run_step_1_process(main_wb, selected_sheet_tool2, progress_bar, status_text_area, 0, 25)
                    if main_wb is None: raise Exception("B∆∞·ªõc 1 th·∫•t b·∫°i.")
                    
                    main_wb = run_step_2_clear_fill(main_wb, progress_bar, status_text_area, 25, 25)
                    if main_wb is None: raise Exception("B∆∞·ªõc 2 th·∫•t b·∫°i.")
                    
                    main_wb = run_step_3_split_by_color(main_wb, progress_bar, status_text_area, 50, 25)
                    if main_wb is None: raise Exception("B∆∞·ªõc 3 th·∫•t b·∫°i.")
                    
                    status_text_area.info("ƒêang chu·∫©n b·ªã file k·∫øt qu·∫£...")
                    final_wb_buffer = io.BytesIO()
                    main_wb.save(final_wb_buffer)
                    final_wb_buffer.seek(0)
                    
                    step4_read_buffer = io.BytesIO(final_wb_buffer.read())
                    final_wb_buffer.seek(0)
                    
                    main_processed_filename = f"[Processed]_{uploaded_file_tool2.name}"
                    
                    zip_buffer = run_step_4_split_files(
                        step4_read_buffer,
                        final_wb_buffer,
                        main_processed_filename,
                        progress_bar, 
                        status_text_area, 
                        75, 
                        25
                    )
                    if zip_buffer is None: raise Exception("B∆∞·ªõc 4 th·∫•t b·∫°i.")

                    main_wb.close()
                    
                    status_text_area.success("‚úÖ HO√ÄN T·∫§T!")
                    progress_bar.progress(100)
                    
                    st.download_button(
                        label="üóÇÔ∏è T·∫£i v·ªÅ G√≥i K·∫øt Qu·∫£ (ZIP)",
                        data=zip_buffer,
                        file_name="KetQua_Thon.zip",
                        mime="application/zip",
                        help=f"File ZIP n√†y ch·ª©a file Excel ch√≠nh ({main_processed_filename}) V√Ä t·∫•t c·∫£ c√°c file con ƒë∆∞·ª£c t√°ch ra t·ª´ 'Nh√≥m 2_GDC'."
                    )
                    
                except Exception as e:
                    st.error(f"Quy tr√¨nh ƒë√£ d·ª´ng do l·ªói: {e}")
                    logging.error(f"L·ªói Streamlit Workflow Tool 2: {e}")

        except Exception as e:
            st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file Excel. File c√≥ th·ªÉ b·ªã h·ªèng ho·∫∑c kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng: {e}")
            logging.error(f"L·ªói Streamlit T·∫£i file Tool 2: {e}")